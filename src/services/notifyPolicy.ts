import User from '../db/models/User';
import logger from '../logger';
import { bot } from '../bot';
import { Markup } from 'telegraf';

export async function notifyPolicyToUsers() {
  const privacyLink =
    'https://github.com/dkurokhtin/vpn-docs/blob/main/vpn_legal_docs.md';

  const users = await User.find({ acceptedPolicy: { $ne: true } });
  logger.info(`üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–ª–∏—Ç–∏–∫–µ –¥–ª—è ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

  for (const user of users) {
    if (!user.telegramId) continue;
    try {
      await bot.telegram.sendMessage(
        user.telegramId,
        'üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏',
        {
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.url('üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', privacyLink)],
            [Markup.button.callback('‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω', 'accept_policy')]
          ]).reply_markup,
          parse_mode: 'Markdown'
        }
      );
    } catch (err) {
      logger.error({ err }, `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª–∏—Ç–∏–∫–∏ ${user.telegramId}`);
    }
  }
}
