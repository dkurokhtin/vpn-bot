import { v4 as uuidv4 } from 'uuid';
import logger from '../logger';
import { getAuthenticatedApi } from './xuiAuth';

export async function authAndRequest() {
  const api = await getAuthenticatedApi();
  // –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø
  await api.get('/dkvpn/panel/api/inbounds/list');
  return api;
}


export async function disableClientInXui(uuid: string) {
  const api = await authAndRequest();

  const { data } = await api.get('/dkvpn/panel/api/inbounds/list');
  const inbounds = data.obj;

  const inbound = inbounds.find((inb: any) => {
    const settings = JSON.parse(inb.settings);
    return settings.clients?.some((client: any) => client.id === uuid);
  });

  if (!inbound) throw new Error(`‚ùå Inbound —Å UUID ${uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω`);

  const settings = JSON.parse(inbound.settings);

  const targetClient = settings.clients.find((client: any) => client.id === uuid);
  if (!targetClient) throw new Error(`‚ùå –ö–ª–∏–µ–Ω—Ç —Å UUID ${uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ inbound`);

  const updatedClient = {
    ...targetClient,
    expiryTime: 0,
    enable: false
  };

  const payload = {
    id: inbound.id, // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π inbound
    settings: JSON.stringify({ clients: [updatedClient] }) // ‚ùóÔ∏è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–ª–∏–µ–Ω—Ç!
  };

  logger.info(`üîß –û—Ç–∫–ª—é—á–∞–µ–º UUID: ${uuid}, inbound ID: ${inbound.id}`);
  logger.debug('üì¶ Payload:', payload);

  const response = await api.post(`/dkvpn/panel/api/inbounds/updateClient/${uuid}`, payload);
  logger.info(`‚úÖ XUI: –∫–ª–∏–µ–Ω—Ç ${uuid} –æ—Ç–∫–ª—é—á—ë–Ω`);
  if (!response.data.success) {
    throw new Error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞: ${response.data.msg}`);
  }


}


export async function createVpnClient(uuid: string, remark: string, telegramId: number) {
  const api = await authAndRequest();

  // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ inbound‚Äô–æ–≤
  const inboundsRes = await api.get('/dkvpn/panel/api/inbounds/list');
  const inbounds = inboundsRes.data?.obj || [];

  // 2. –ò—â–µ–º –Ω—É–∂–Ω—ã–π inbound (vless + reality, –ø–æ—Ä—Ç 443)
  const inbound = inbounds.find(
    (item: any) =>
      item.protocol === 'vless' &&
      String(item.port) === '443' // –º–æ–∂–µ—à—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Å–≤–æ–π –ø–æ—Ä—Ç
  );

  if (!inbound) {
    throw new Error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π inbound –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞.');
  }
  const subscriptionDays = 7;
  const expiryTime = Date.now() + subscriptionDays * 24 * 60 * 60 * 1000;
  
  // 3. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º payload
  const payload = {
    id: inbound.id,
    settings: JSON.stringify({
      clients: [
        {
          id: uuid,
          email: remark,
          enable: true,
          expiryTime,
          flow: 'xtls-rprx-vision',
          totalGB: 0,
          tgId: telegramId,
          limitIp: 0
        }
      ]
    })
  };

  // 4. –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
  const res = await api.post('/dkvpn/panel/api/inbounds/addClient', payload);
  logger.info('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:', res.data);

  if (!res.data.success) {
    throw new Error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç XUI: ${res.data.msg}`);
  }

  return res.data;
}

