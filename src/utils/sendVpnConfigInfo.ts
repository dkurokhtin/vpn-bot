import { Context, Markup } from 'telegraf';
import QRCode from 'qrcode';

export async function sendVpnConfigInfo(
    ctx: Context,
    user: {
      vpnConfigUrl?: string | null;
      username?: string | null;
      subscriptionEndsAt?: Date | null;
    }
  ) {
  const guideLink = 'https://dkurokhtin.github.io/vpn-docs/#/';
  const vpnUrl = user.vpnConfigUrl;

  if (!vpnUrl) {
    return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ VPN-—Å—Å—ã–ª–∫—É –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞');
  }

  // ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –ø–æ —Å—Å—ã–ª–∫–µ
  const qrBuffer = await QRCode.toBuffer(vpnUrl, {
    width: 300,
    margin: 1
  });
  
  await ctx.replyWithPhoto({ source: qrBuffer }, {
    caption: 'üì≤ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
  });
  await ctx.reply(
    `üîó *–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:*\n\`\`\`\n${vpnUrl}\n\`\`\``,
    {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [{ text: 'üßæ –°—Ç–∞—Ç—É—Å', callback_data: 'status' }],
        [{ text: 'üì≤ –ü–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥', callback_data: 'get_qr' }],
        [{ text: 'üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é', url: guideLink }]
      ])
      
    }
  );


}
