import { Context, Markup } from 'telegraf';
import User from '../../db/models/User';
import { v4 as uuidv4 } from 'uuid';
import { createVpnClient } from '../../services/xuiService';

import logger from '../../logger';
import { disableExpiredClients } from '../../services/disableExpiredClients';

export async function startCommand(ctx: Context) {
  const guideLink = `https://dkurokhtin.github.io/vpn-docs/#/`
  const uuid = uuidv4();
  const {user} = ctx.state;
  const {subscriptionEndsAt,telegramId} = user;
  const {username} = ctx.state.user || `user_${telegramId}`;

  if (!telegramId) return ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à Telegram ID");


  const now = Date.now();
  const expiresAt = subscriptionEndsAt?.getTime() || 0;
  const isActive = expiresAt > now;
  
  const statusText = isActive ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ò—Å—Ç–µ–∫–ª–∞';
  const expiresAtFormatted = new Date(expiresAt).toLocaleString('ru-RU', {
    timeZone: 'Europe/Moscow',
    dateStyle: 'medium',
    timeStyle: 'short',
  });
  const expiresDate = new Date(expiresAt).toLocaleString('ru-RU');
  const daysLeft = Math.max(0, Math.ceil((expiresAt - now) / (1000 * 60 * 60 * 24)));
  const message = `üîê *–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏*: ${statusText}`;
  const vpnLink = `vless://${uuid}@${process.env.VPN_HOST}:443?encryption=none&flow=xtls-rprx-vision&type=tcp&security=reality&fp=chrome&sni=yahoo.com&pbk=${process.env.VPN_PUBLIC_KEY}&sid=&spx=%2F#${username}`;
  if (user) {
    
    // return ctx.reply(
    //   `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${username}!\n` +
    //   `üóìÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ${daysLeft} –¥–Ω–µ–π.\n\n` +
    //   `üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ: ${expiresAtFormatted}` +
    //   `${message} \n` +
    //   `üîó –í–∞—à–∞ VPN-—Å—Å—ã–ª–∫–∞:\n\`${vpnLink}\``,
    //   {
    //     parse_mode: 'MarkdownV2',
    //     reply_markup: {
    //       inline_keyboard: [
    //         [{ text: '‚öôÔ∏è –°—Ç–∞—Ç—É—Å', callback_data: 'status' }],
    //         [{ text: 'üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é', url: guideLink }]
    //       ]
    //     }
    //   }
    // )
      
    return ctx.telegram.sendMessage(telegramId,"—Ç–µ—Å—Ç")
    
  }



  try {
    await createVpnClient(uuid, username,telegramId);

    

   const user = await User.create({
      telegramId,
      username,
      balance: 0,
      subscriptionEndsAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 –¥–Ω–µ–π
      xrayUuid: uuid,
      vpnConfigUrl: vpnLink
    });


    return ctx.reply(
        `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${username}!\n` +
        `üóìÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞  –¥–Ω–µ–π.\n\n` +
        `üîó –í–∞—à–∞ VPN-—Å—Å—ã–ª–∫–∞:\`\`\`\n${vpnLink}\n\`\`\`\n`,
        Markup.inlineKeyboard([
            [Markup.button.callback('‚öôÔ∏è –°—Ç–∞—Ç—É—Å', 'status')],
            [Markup.button.url('üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é', guideLink)]
          ]))
      
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤ XUI:', error.message);
    return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPN-–¥–æ—Å—Ç—É–ø. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
  }
}
