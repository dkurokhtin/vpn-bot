import { Markup } from 'telegraf';
import { BotContext } from '../context';
import User from '../../db/models/User';
import { v4 as uuidv4 } from 'uuid';
import { createVpnClient } from '../../services/xuiService';

import logger from '../../logger';
import { updateMenu } from '../../utils/updateMenu';
import { statusCommand } from './status';

export async function startCommand(ctx: BotContext) {
  const guideLink = `https://dkurokhtin.github.io/vpn-docs/#/`;
  const telegramId = ctx.from?.id;

  if (!telegramId) return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à Telegram ID');

  if (ctx.state.user) {
    return statusCommand(ctx);
  }

  const username = ctx.from?.username || `user_${telegramId}`;
  const uuid = uuidv4();
  const vpnLink = `vless://${uuid}@${process.env.VPN_HOST}:443?encryption=none&flow=xtls-rprx-vision&type=tcp&security=reality&fp=chrome&sni=yahoo.com&pbk=${process.env.VPN_PUBLIC_KEY}&sid=&spx=%2F#${username}`;



    try {
      await createVpnClient(uuid, username, telegramId);

     const user = await User.create({
        telegramId,
        username,
        balance: 0,
        subscriptionEndsAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 –¥–Ω–µ–π
        xrayUuid: uuid,
        vpnConfigUrl: vpnLink
      });

      return updateMenu(
        ctx,
        `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${username}!\n` +
          `üóìÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ 7 –¥–Ω–µ–π.\n\n` +
          `üîó –í–∞—à–∞ VPN-—Å—Å—ã–ª–∫–∞:\n\`\`\`\n${vpnLink}\n\`\`\`\n`,
        Markup.inlineKeyboard([
          [Markup.button.callback('‚öôÔ∏è –°—Ç–∞—Ç—É—Å', 'status')],
          [Markup.button.url('üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é', guideLink)]
        ])
      );
      
  } catch (error: any) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤ XUI:', error.message);
    return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPN-–¥–æ—Å—Ç—É–ø. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
  }
}
