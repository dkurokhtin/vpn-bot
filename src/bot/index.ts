import { Telegraf } from 'telegraf';
import { BotContext } from './context';
import { BOT_TOKEN } from '../config';
import { startCommand, acceptPolicy } from './commands/start';
import { statusCommand } from './commands/status';
import { balanceCommand } from './commands/balance';
import { qrCommand } from './commands/qr';
import { extendCommand } from './commands/extend';
import logger from '../logger';
import wrapCallbackAction from '../utils/wrapCallbackAction';
import { configCommand } from './commands/config';
import { loadUser } from './middleware/loadUser';
import { mongooseSession } from '../session';

export function registerActions(bot: Telegraf<BotContext>) {

    bot.action('status', wrapCallbackAction(statusCommand));
    bot.action('extend', wrapCallbackAction(extendCommand));
    bot.action('get_qr', wrapCallbackAction(qrCommand));
    bot.action('accept_policy', wrapCallbackAction(acceptPolicy));
  }

export const bot = new Telegraf<BotContext>(BOT_TOKEN);
bot.use(mongooseSession);
 // –õ–æ–≥ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö –∞–ø–¥–µ–π—Ç–æ–≤ (—Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–º–∞–Ω–¥—ã, –∫–Ω–æ–ø–∫–∏)
bot.use((ctx, next) => {
    const user = ctx.from?.username || `ID:${ctx.from?.id}`;
    const type = ctx.updateType;
  
    let data = '[–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ]';
  
    if (type === 'message' && 'text' in ctx.message!) {
      data = ctx.message.text;
    }
  
    if (type === 'callback_query' && 'data' in ctx.callbackQuery!) {
      data = `callback:${ctx.callbackQuery.data}`;
    }
  
    logger.info(`üì® [${type}] –æ—Ç ${user}: ${data}`);
  
    return next();
  });
bot.use(loadUser);
// ‚úÖ –ö–æ–º–∞–Ω–¥—ã
bot.start(startCommand);
bot.command('get_qr',qrCommand);
bot.command('terms', (ctx) =>
  ctx.reply('üìÑ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∏ –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:\n\nhttps://github.com/dkurokhtin/vpn-docs/blob/main/vpn_legal_docs.md')
);
bot.command('status', statusCommand);
bot.command('balance', balanceCommand);
bot.command('config', configCommand);
bot.command('extend', extendCommand);

// ‚úÖ Callback-–∫–Ω–æ–ø–∫–∏ —Å –æ–±—ë—Ä—Ç–∫–æ–π
registerActions(bot);

// ‚úÖ –ó–∞–ø—É—Å–∫ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
export async function launchBot(attempt = 0): Promise<void> {
  try {
    await bot.launch();
    logger.info('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
  } catch (err) {
    logger.error({ err }, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞');
    if (attempt < 5) {
      const delay = 10_000;
      logger.warn(`‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ ${delay / 1000}—Å`);
      setTimeout(() => {
        launchBot(attempt + 1).catch(() => {});
      }, delay);
    } else {
      logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫');
      process.exit(1);
    }
  }
}

// ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason) => {
  logger.error({ reason }, 'üî• [unhandledRejection]');
});

process.on('uncaughtException', (err) => {
  logger.error({ err }, 'üí• [uncaughtException]');
});
